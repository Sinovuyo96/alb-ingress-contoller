name: Application CI/CD

on:
  push:
    branches:
    #watches changes on terraform branch merges
      - main
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set AWS credentials
        run: |
         echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
         echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
      - name: Run AWS CLI command
        run : |
        #   cd application
        # aws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy --policy-document iam_policy.json
          
      - name: eksclt
        run: |
         # install eksctl
          # for ARM systems, set ARCH to: `arm64`, `armv6` or `armv7`
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH
          
          curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
          
          # (Optional) Verify checksum
          curl -sL "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_checksums.txt" | grep $PLATFORM | sha256sum --check
          
          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
          
          sudo mv /tmp/eksctl /usr/local/bin
      
      - name: Update KubeConfig
        run: |
         aws eks update-kubeconfig --name prod-cluster --region us-east-1
         cd application/
#         curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.7.2/docs/install/iam_policy.json

#         aws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy-delete --policy-document file://iam_policy.json

      - name: Deploy to EKS
        run: |
          cd  application/
          . ns-verify.sh
          kubectl apply -f crds.yaml
          kubectl apply -f svc.yaml
          kubectl apply -f deployment.yaml
          kubectl apply -f service-account.yaml
          kubectl apply -f ingressClass.yaml
          kubectl apply -f app-ui.yaml
          kubectl apply -f ui-svc.yaml
          kubectl apply -f catalog-deploy.yaml
          kubectl apply -f ingress-resource.yaml
          kubectl apply -f mysql.yaml
          
      # - name: Argocd resource creation
      #   run: |
      #       # install ArgoCD in k8s
      #       cd application
      #       . ns-verify.sh
      #       kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      #       kubectl apply -f argocd.yaml
      #       kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 --decode && echo
         
      #       # access ArgoCD UI
      #       kubectl get svc -n argocd
      #       #kubectl port-forward svc/argocd-server 8080:443 -n argocd           
      #       # you can change and delete init password
      # - name: Expose argocd-server
      #   run: |
      #      kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
      #      export ARGOCD_SERVER=`kubectl get svc argocd-server -n argocd -o json | jq --raw-output '.status.loadBalancer.ingress[0].hostname'`
      # - name: Login to argocd-server
      #   run: |
      #      export ARGO_PWD=`kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d`
      #      argocd login $ARGOCD_SERVER --username admin --password $ARGO_PWD --insecure
           

